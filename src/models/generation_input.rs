/*
 * Stable Horde
 *
 * The API documentation for the Stable Horde
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GenerationInput {
    /// The prompt which will be sent to Stable Diffusion to generate an image
    #[serde(rename = "prompt")]
    pub prompt: String,
    #[serde(rename = "params", skip_serializing_if = "Option::is_none")]
    pub params: Option<Box<crate::models::ModelGenerationInputStable>>,
    /// Set to true if this request is NSFW. This will skip workers which censor images.
    #[serde(rename = "nsfw", skip_serializing_if = "Option::is_none")]
    pub nsfw: Option<bool>,
    /// When true, only trusted workers will serve this request. When False, Evaluating workers will also be used which can increase speed but adds more risk!
    #[serde(rename = "trusted_workers", skip_serializing_if = "Option::is_none")]
    pub trusted_workers: Option<bool>,
    /// If the request is SFW, and the worker accidentaly generates NSFW, it will send back a censored image.
    #[serde(rename = "censor_nsfw", skip_serializing_if = "Option::is_none")]
    pub censor_nsfw: Option<bool>,
    #[serde(rename = "workers", skip_serializing_if = "Option::is_none")]
    pub workers: Option<Vec<String>>,
    #[serde(rename = "models", skip_serializing_if = "Option::is_none")]
    pub models: Option<Vec<String>>,
    /// The Base64-encoded webp to use for img2img
    #[serde(rename = "source_image", skip_serializing_if = "Option::is_none")]
    pub source_image: Option<String>,
}

impl GenerationInput {
    pub fn new(prompt: String) -> GenerationInput {
        GenerationInput {
            prompt,
            params: None,
            nsfw: None,
            trusted_workers: None,
            censor_nsfw: None,
            workers: None,
            models: None,
            source_image: None,
        }
    }
}


