/*
 * Stable Horde
 *
 * The API documentation for the Stable Horde
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ModelGenerationInputStable {
    #[serde(rename = "sampler_name", skip_serializing_if = "Option::is_none")]
    pub sampler_name: Option<SamplerName>,
    /// Special Toggles used in the SD Webui. To be documented.
    #[serde(rename = "toggles", skip_serializing_if = "Option::is_none")]
    pub toggles: Option<Vec<i32>>,
    #[serde(rename = "cfg_scale", skip_serializing_if = "Option::is_none")]
    pub cfg_scale: Option<f32>,
    #[serde(rename = "denoising_strength", skip_serializing_if = "Option::is_none")]
    pub denoising_strength: Option<f32>,
    /// The seed to use to generete this request
    #[serde(rename = "seed", skip_serializing_if = "Option::is_none")]
    pub seed: Option<String>,
    /// The height of the image to generate
    #[serde(rename = "height", skip_serializing_if = "Option::is_none")]
    pub height: Option<i32>,
    /// The width of the image to generate
    #[serde(rename = "width", skip_serializing_if = "Option::is_none")]
    pub width: Option<i32>,
    /// If passed with multiple n, the provided seed will be incremented every time by this value
    #[serde(rename = "seed_variation", skip_serializing_if = "Option::is_none")]
    pub seed_variation: Option<i32>,
    /// Set to true to process the generated image with GFPGAN (face correction)
    #[serde(rename = "use_gfpgan", skip_serializing_if = "Option::is_none")]
    pub use_gfpgan: Option<bool>,
    /// Set to true to process the generated image with RealESRGAN
    #[serde(rename = "use_real_esrgan", skip_serializing_if = "Option::is_none")]
    pub use_real_esrgan: Option<bool>,
    /// Set to true to process the generated image with LDSR
    #[serde(rename = "use_ldsr", skip_serializing_if = "Option::is_none")]
    pub use_ldsr: Option<bool>,
    /// Set to true to upscale the image
    #[serde(rename = "use_upscaling", skip_serializing_if = "Option::is_none")]
    pub use_upscaling: Option<bool>,
    #[serde(rename = "steps", skip_serializing_if = "Option::is_none")]
    pub steps: Option<i32>,
    /// The amount of images to generate
    #[serde(rename = "n", skip_serializing_if = "Option::is_none")]
    pub n: Option<i32>,
}

impl ModelGenerationInputStable {
    pub fn new() -> ModelGenerationInputStable {
        ModelGenerationInputStable {
            sampler_name: None,
            toggles: None,
            cfg_scale: None,
            denoising_strength: None,
            seed: None,
            height: None,
            width: None,
            seed_variation: None,
            use_gfpgan: None,
            use_real_esrgan: None,
            use_ldsr: None,
            use_upscaling: None,
            steps: None,
            n: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SamplerName {
    #[serde(rename = "k_lms")]
    KLms,
    #[serde(rename = "k_heun")]
    KHeun,
    #[serde(rename = "k_euler")]
    KEuler,
    #[serde(rename = "k_euler_a")]
    KEulerA,
    #[serde(rename = "k_dpm_2")]
    KDpm2,
    #[serde(rename = "k_dpm_2_a")]
    KDpm2A,
    #[serde(rename = "DDIM")]
    Ddim,
    #[serde(rename = "PLMS")]
    Plms,
}

impl Default for SamplerName {
    fn default() -> SamplerName {
        Self::KLms
    }
}

